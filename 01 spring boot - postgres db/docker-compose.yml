version: '3.8'

services:
  
  read:
    image: grafana/loki:2.9.5
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../healthcloud-config/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      healthcloud-apis:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.5
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../healthcloud-config/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.5
    volumes:
      - ../healthcloud-config/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - healthcloud-api-gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../healthcloud-config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../healthcloud-config/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - healthcloud-api-gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../healthcloud-config/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service
  
  healthcloud-redis:
    image: redis:7.2.4
    ports:
      - 6379:6379
    restart: always
    container_name: healthcloud-redis
    networks:
      - healthcloud-apis

  db:
    image: postgres:16
    env_file: .env
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    command: >
      postgres -c log_statement=all
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h localhost || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 60
      start_period: 30s
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistent data storage.
      - ./healthcloud-config/init-scripts:/docker-entrypoint-initdb.d  # Initialization scripts.
    networks:
      - healthcloud-apis

  auth-db:
    image: postgres:16
    env_file: .env
    restart: unless-stopped
    ports:
      - "${POSTGRES_AUTH_PORT}:5432"
    command: >
      postgres -c log_statement=all
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_AUTH_USER -d $POSTGRES_AUTH_DB -h localhost || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 60
      start_period: 30s
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data  # Persistent data storage.
      - ./healthcloud-config/auth-init-scripts:/docker-entrypoint-initdb.d  # Initialization scripts.
    networks:
      - healthcloud-apis

  # MongoDB Service: Provides NoSQL database storage.
  mongodb:
    image: mongo:7.0
    env_file: .env
    restart: unless-stopped
    ports: [ "${MONGO_DB_PORT}:27017" ]
    volumes:
      - mongo_data:/data/db  # Persistent data storage.
    networks:
      - healthcloud-apis

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT}:5672"  # AMQP protocol port
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"  # Management UI port
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - healthcloud-apis

  #  keycloak:
  #    image: mightythor99/keycloak:24.0.1_hc_phone-2.3.4-snapshot
  #    command:
  #      - start-dev
  ##      - --verbose
  #      - --spi-phone-default-service=dummy
  ##      - --spi-phone-default-token-expires-in=60
  ##      - --spi-phone-default-source-hour-maximum=0
  ##      - --spi-phone-default-target-hour-maximum=0
  ##      - --spi-phone-default-hcrealm-duplicate-phone=false
  #    #      - --spi-phone-default-hcrealm-default-number-regex=^\+?\d+$
  #    #      - --spi-phone-default-hcrealm-valid-phone=true
  #    #      - --spi-phone-default-hcrealm-canonicalize-phone-numbers=RFC3966
  ##      - --spi-phone-default-hcrealm-phone-default-region=IN
  #    #      - --spi-phone-default-hcrealm-otp-expires=3600
  #    environment:
  #      spi-phone-default-service: dummy
  #      JAVA_OPTS: "-Dkeycloak.profile.feature.upload_scripts=enabled ${JAVA_OPTS}"
  #      JAVA_OPTS_APPEND: -Dkeycloak.profile.feature.upload_scripts=enabled
  #      DB_VENDOR: POSTGRES
  #      DB_ADDR: postgres
  #      DB_PORT: 5432
  #      DB_DATABASE: healthcloud
  #      DB_SCHEMA: security
  #      DB_USER: ${POSTGRES_USER}
  #      DB_PASSWORD: ${POSTGRES_PASSWORD}
  #      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
  #      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
  #      KC_HEALTH_ENABLED: true
  #      KC_HTTP_ENABLED: true
  #      KC_METRICS_ENABLED: true
  ##      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/server.crt
  ##      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/server.key
  #    env_file:
  #      - .env
  #    ports:
  #      - "8180:8080"
  #      - "8443:8443"
  #      - "8787:8787" # debug port
  #    depends_on:
  #      - db
  ##    volumes:
  ##      - ./healthcloud-config/keycloak/server.crt:/opt/keycloak/conf/server.crt
  ##      - ./healthcloud-config/keycloak/server.key:/opt/keycloak/conf/server.key
  ##      - ./healthcloud-config/security/keycloak-config:/export
  #    #    - ./healthcloud-keycloak-sms-authenticator/target/com.argusoft.healthcloud.healthcloud-keycloak-sms-authenticator.jar:/opt/keycloak/providers/com.argusoft.healthcloud.healthcloud-keycloak-sms-authenticator.jar
  #    networks:
  #      - healthcloud-apis


  healthcloud-config-server:
    image: healthcloud-config-server:0.0.1-SNAPSHOT
    container_name: healthcloud-config-server
    ports: [ "${HEALTHCLOUD_CONFIG_SERVER_PORT}:${HEALTHCLOUD_CONFIG_SERVER_PORT}" ]
    #    healthcheck:
    #      test: [ "CMD-SHELL", "curl --fail --silent http://localhost:8071/actuator/health/readiness | grep UP || exit 1" ]
    #      interval: 10s
    #      timeout: 5s
    #      retries: 10
    #      start_period: 10s
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - healthcloud-apis


  healthcloud-discovery-server:
    image: healthcloud-discovery-server:0.0.1-SNAPSHOT
    container_name: healthcloud-discovery-server
    ports: [ "${HEALTHCLOUD_DISCOVERY_SERVER_PORT}:${HEALTHCLOUD_DISCOVERY_SERVER_PORT}" ]
    env_file:
      - .env
    depends_on:
      - healthcloud-config-server
    networks:
      - healthcloud-apis

  healthcloud-abdm-service:
    image: healthcloud-abdm-service:0.0.1-SNAPSHOT
    container_name: healthcloud-abdm-service-ms
    ports: [ "${ABDM_SERVICE_PORT}:${ABDM_SERVICE_PORT}" ]
    env_file:
      - .env
    environment:
      SPRING_APPLICATION_NAME: "healthcloud-abdm-service"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: "configserver:http://healthcloud-config-server:${HEALTHCLOUD_CONFIG_SERVER_PORT}/"
    depends_on:
      #      healthcloud-config-server:
      #        condition: service_healthy
      db:
        condition: service_completed_successfully
    networks:
      - healthcloud-apis

  healthcloud-appointment-service:
    image: healthcloud-appointment-service:0.0.1-SNAPSHOT
    container_name: healthcloud-appointment-service-ms
    ports: [ "${APPOINTMENT_SERVICE_PORT}:${APPOINTMENT_SERVICE_PORT}" ]
    env_file:
      - .env
    environment:
      SPRING_APPLICATION_NAME: "healthcloud-appointment-service"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: "configserver:http://healthcloud-config-server:${HEALTHCLOUD_CONFIG_SERVER_PORT}/"
    depends_on:
      #      healthcloud-config-server:
      #        condition: service_healthy
      - db
    #        condition: service_completed_successfully
    networks:
      - healthcloud-apis

  healthcloud-billing-service:
    image: healthcloud-billing-service:0.0.1-SNAPSHOT
    container_name: healthcloud-billing-service-ms
    ports: [ "${BILLING_SERVICE_PORT}:${BILLING_SERVICE_PORT}" ]
    env_file:
      - .env
    environment:
      SPRING_APPLICATION_NAME: "healthcloud-billing-service"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: "configserver:http://healthcloud-config-server:${HEALTHCLOUD_CONFIG_SERVER_PORT}/"
    depends_on:
      #      healthcloud-config-server:
      #        condition: service_healthy
      db:
        condition: service_completed_successfully
    networks:
      - healthcloud-apis

  healthcloud-doctor-search-service:
    image: healthcloud-doctor-search-service:0.0.1-SNAPSHOT
    container_name: healthcloud-doctor-search-service-ms
    ports: [ "${DOCTOR_SEARCH_SERVICE_PORT}:${DOCTOR_SEARCH_SERVICE_PORT}" ]
    env_file:
      - .env
    environment:
      SPRING_APPLICATION_NAME: "healthcloud-doctor-search-service"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: "configserver:http://healthcloud-config-server:${HEALTHCLOUD_CONFIG_SERVER_PORT}/"
    depends_on:
      #      healthcloud-config-server:
      #        condition: service_healthy
      db:
        condition: service_completed_successfully
    networks:
      - healthcloud-apis

  healthcloud-doctor-service:
    image: healthcloud-doctor-service:0.0.1-SNAPSHOT
    container_name: healthcloud-doctor-service-ms
    ports: [ "${DOCTOR_SERVICE_PORT}:${DOCTOR_SERVICE_PORT}" ]
    env_file:
      - .env
    environment:
      SPRING_APPLICATION_NAME: "healthcloud-doctor-service"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: "configserver:http://healthcloud-config-server:${HEALTHCLOUD_CONFIG_SERVER_PORT}/"
    depends_on:
      #      healthcloud-config-server:
      #        condition: service_healthy
      db:
        condition: service_completed_successfully
    networks:
      - healthcloud-apis

  healthcloud-document-service:
    image: healthcloud-document-service:0.0.1-SNAPSHOT
    container_name: healthcloud-document-service-ms
    ports: [ "${DOCUMENT_SERVICE_PORT}:${DOCUMENT_SERVICE_PORT}" ]
    env_file:
      - .env
    environment:
      SPRING_APPLICATION_NAME: "healthcloud-document-service"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: "configserver:http://healthcloud-config-server:${HEALTHCLOUD_CONFIG_SERVER_PORT}/"
    depends_on:
      #      healthcloud-config-server:
      #        condition: service_healthy
      mongodb:
        condition: service_completed_successfully
    networks:
      - healthcloud-apis

  healthcloud-organization-service:
    image: healthcloud-organization-service:0.0.1-SNAPSHOT
    container_name: healthcloud-organization-service-ms
    ports: [ "${ORGANIZATION_SERVICE_PORT}:${ORGANIZATION_SERVICE_PORT}" ]
    env_file:
      - .env
    environment:
      SPRING_APPLICATION_NAME: "healthcloud-organization-service"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: "configserver:http://healthcloud-config-server:${HEALTHCLOUD_CONFIG_SERVER_PORT}/"
    depends_on:
      #      healthcloud-config-server:
      #        condition: service_healthy
      db:
        condition: service_completed_successfully
    networks:
      - healthcloud-apis

  healthcloud-patient-service:
    image: healthcloud-patient-service:0.0.1-SNAPSHOT
    container_name: healthcloud-patient-service-ms
    ports: [ "${PATIENT_SERVICE_PORT}:${PATIENT_SERVICE_PORT}" ]
    env_file:
      - .env
    environment:
      SPRING_APPLICATION_NAME: "healthcloud-patient-service"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: "configserver:http://healthcloud-config-server:${HEALTHCLOUD_CONFIG_SERVER_PORT}/"
    depends_on:
      #      healthcloud-config-server:
      #        condition: service_healthy
      db:
        condition: service_completed_successfully
    networks:
      - healthcloud-apis

  healthcloud-prescriptionpad-service:
    image: healthcloud-prescriptionpad-service:0.0.1-SNAPSHOT
    container_name: healthcloud-prescriptionpad-service-ms
    ports: [ "${PRESCRIPTION_PAD_SERVICE_PORT}:${PRESCRIPTION_PAD_SERVICE_PORT}" ]
    env_file:
      - .env
    environment:
      SPRING_APPLICATION_NAME: "healthcloud-prescriptionpad-service"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: "configserver:http://healthcloud-config-server:${HEALTHCLOUD_CONFIG_SERVER_PORT}/"
    depends_on:
      #      healthcloud-config-server:
      #        condition: service_healthy
      db:
        condition: service_completed_successfully
    networks:
      - healthcloud-apis

  healthcloud-user-service:
    image: healthcloud-user-service:0.0.1-SNAPSHOT
    container_name: healthcloud-user-service-ms
    ports: [ "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}" ]
    env_file:
      - .env
    environment:
      SPRING_APPLICATION_NAME: "healthcloud-user-service"
      SPRING_PROFILES_ACTIVE: default
      SPRING_CONFIG_IMPORT: "configserver:http://healthcloud-config-server:${HEALTHCLOUD_CONFIG_SERVER_PORT}/"
    depends_on:
      #      healthcloud-config-server:
      #        condition: service_healthy
      db:
        condition: service_completed_successfully
    networks:
      - healthcloud-apis

  healthcloud-api-gateway:
    image: healthcloud-api-gateway:0.0.1-SNAPSHOT
    container_name: healthcloud-api-gateway
    ports: [ "${HEALTHCLOUD_API_GATEWAY_PORT}:${HEALTHCLOUD_API_GATEWAY_PORT}" ]
    env_file:
      - .env
    networks:
      - healthcloud-apis
    depends_on:
      - db
      - mongodb
      - healthcloud-config-server
      - healthcloud-discovery-server
      - healthcloud-appointment-service
      - healthcloud-abdm-service
      - healthcloud-billing-service
      - healthcloud-doctor-search-service
      - healthcloud-doctor-service
      - healthcloud-document-service
      - healthcloud-organization-service
      - healthcloud-patient-service
      - healthcloud-prescriptionpad-service
      - healthcloud-user-service

# monolithic application for desktop app build with electron
#  healthcloud-web-service:
#    image: healthcloud-web-service:0.0.1-SNAPSHOT
#    container_name: healthcloud-web-service-ms
#    ports: [ "${WEB_SERVICE_PORT}:${WEB_SERVICE_PORT}" ]
#    env_file:
#      - .env
#    networks:
#      - healthcloud-apis
#    depends_on:
#      db:
#        condition: service_completed_successfully
#      mongodb:
#        condition: service_completed_successfully

networks:
  healthcloud-apis:
    driver: bridge

volumes:
  postgres_data: { }  # Persistent volume for PostgreSQL data.
  postgres_auth_data: { } # Persistent volume for PostgreSQL auth data.
  mongo_data: { }  # Persistent volume for MongoDB data.
  rabbitmq_data: { }
